import random

class FirstOrderSource:
    def __init__(self, alphabet: dict) -> None:
        '''
            'alphabet' is a dictionary of characters (keys)
            mapped with their respective probabilities (values)
            of being produced by the source.
        '''

        self.alphabet = alphabet


    def __str__(self) -> str:
        '''
            returns a representation of the source in the form:
            source_entropy

            entropy is the probabiliy mapped with the char that occurs
            the most in the dictionary (the biggest probability).
        '''
        probabilities = list(self.alphabet.values())
        entropy = max(probabilities)

        return f"source_{entropy}"


    def _produce_char(self) -> str:
        '''
            returns a char from the alphabet.

            randomly selects a char until its associated probability
            is matched, then the selected char is returned. 
        '''

        chars = list(self.alphabet.keys())

        while True:
            produced_char = random.choice(chars)
            produced_char_probability = self.alphabet[produced_char]
            probability_to_produce = random.uniform(0, 1)

            if produced_char_probability >= probability_to_produce: return produced_char
        


    def generate_text(self, text_len: int) -> str:
        '''
            returns a string of 'text_len' chars, those are 
            generated by '_produce_char' method.
        '''

        text = ""

        for _ in range(text_len): text = text + self._produce_char()

        return text