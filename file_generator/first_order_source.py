import random
from functools import reduce

class FirstOrderSource:
    def __init__(self, alphabet: dict) -> None:
        '''
            'alphabet' is a dictionary of characters (keys)
            mapped with their respective probabilities (values)
            of being produced by the source.

            The probabilities MUST be standardized to integer values
            before instancing a FirstOrderSource.
        '''

        self.alphabet = alphabet
        self._characters = list(alphabet.keys());
        # required since we don't how much big could the 
        # integer-normalized probabilities be. --- i'll explain this better in the next commit.
        
        self.max_probability = reduce(lambda a,b : a+b, alphabet.values())

    def _produce_char(self) -> str:
        '''
            returns a char from the alphabet.

            randomly selects a char until its associated probability
            is matched, then the selected char is returned. 
        '''

        char = ""

        while char == "":
            candidate_char = random.choice(self._characters)
            candidate_char_probability = self.alphabet[candidate_char]

            # 'randint' is used since probability were previoulsy normalized 
            # to integer values.
            probability = random.randint(0, self.max_probability)

            if candidate_char_probability >= probability:
                char = candidate_char
                
        return char

    def _generate_text(self, text_len: int) -> str:
        '''
            returns a string of 'text_len' chars, those are 
            generated by '_produce_char' method.
        '''

        text = ""

        for _ in range(text_len):
            char = self._produce_char()
            text = text + char

        return text

    def write_file(self, text_len: int, file_path: str) -> None:
        '''
            writes a string of 'text_len' chars, this string 
            is obtained from '_generate_text' method.
        '''

        with open(file_path, 'w') as file_to_write:
            output_text = self._generate_text(text_len)
            file_to_write.writelines(output_text)